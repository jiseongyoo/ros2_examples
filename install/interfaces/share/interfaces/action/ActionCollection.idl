// generated from rosidl_adapter/resource/action.idl.em
// with input from interfaces/action/ActionCollection.action
// generated code does not contain a copyright notice


module interfaces {
  module action {
    typedef int32 int32__5[5];
    typedef string string__5[5];
    module ActionCollection_Goal_Constants {
      const string CONSTANT_STRING_FIRST = "CONSTANT_STRING_FIRST";
    };
    @verbatim (language="comment", text=
      " Action file has result section, goal section and feedback section." "\n"
      " Those three sections are separated by '---'." "\n"
      " Result section is followed by goal section." "\n"
      " Goal section is followed by feedback section.")
    struct ActionCollection_Goal {
      @verbatim (language="comment", text=
        " .srv file name should follow naming conventions" "\n"
        " 1. .srv file name must start with uppercase alphabet." "\n"
        " 2. .srv file name must have only alphabets and numbers" "\n"
        " Fields name should follow naming conventions." "\n"
        " 1. Field name must start with alphabet and not end with underscore." "\n"
        " 2. Field name must have only lowercase alphabets and underscores." "\n"
        " 3. Field name must not have consecutive underscores." "\n"
        " 4. Constant field name must be uppercase alphabets." "\n"
        " Format of field declaration" "\n"
        " typename <variable_name> <default_value>" "\n"
        " <default_value> is optional, but constant field must assign default value with operator '='." "\n"
        " Request section has data fields that comes from client requesting service.")
      boolean bool_t;

      octet byte_t;

      uint8 char_t;

      float float_t;

      double double_t;

      int8 octet_int_t;

      uint8 octet_uint_t;

      int16 short_int_t;

      uint16 short_uint_t;

      int32 long_int_t;

      uint32 long_uint_t;

      int64 long_long_int_t;

      uint64 long_long_uint_t;

      @verbatim (language="comment", text=
        " array and bounded types" "\n"
        " [] unbounded, [N] static, [<=N] bounded")
      sequence<int32> unbounded_long_int_arr;

      int32__5 static_five_long_int_arr;

      sequence<int32, 5> bounded_five_long_int_arr;

      @verbatim (language="comment", text=
        " string data types" "\n"
        " <=N bounded character, [N] static string array, [<=N] bounded string array" "\n"
        " <=N[] bounded character unbounded string array" "\n"
        " <=N[<=M] bounded character bounded string array")
      string string_t;

      string__5 static_five_string_arr;

      string<10> bounded_ten_char_string_t;

      sequence<string, 5> bounded_five_string_arr;

      sequence<string<10>> bounded_ten_char_unbounded_string_arr;

      sequence<string<10>, 5> bounded_ten_char_bounded_five_string_arr;
    };
    typedef int32 int32__5[5];
    typedef string string__5[5];
    module ActionCollection_Result_Constants {
      const string CONSTANT_STRING_SECOND = "CONSTANT_STRING_SECOND";
    };
    struct ActionCollection_Result {
      @verbatim (language="comment", text=
        " Response section has data fields that are sent to client after service process.")
      boolean bool_t;

      octet byte_t;

      uint8 char_t;

      float float_t;

      double double_t;

      int8 octet_int_t;

      uint8 octet_uint_t;

      int16 short_int_t;

      uint16 short_uint_t;

      int32 long_int_t;

      uint32 long_uint_t;

      int64 long_long_int_t;

      uint64 long_long_uint_t;

      @verbatim (language="comment", text=
        " array and bounded types" "\n"
        " [] unbounded, [N] static, [<=N] bounded")
      sequence<int32> unbounded_long_int_arr;

      int32__5 static_five_long_int_arr;

      sequence<int32, 5> bounded_five_long_int_arr;

      @verbatim (language="comment", text=
        " string data types" "\n"
        " <=N bounded character, [N] static string array, [<=N] bounded string array" "\n"
        " <=N[] bounded character unbounded string array" "\n"
        " <=N[<=M] bounded character bounded string array")
      string string_t;

      string__5 static_five_string_arr;

      string<10> bounded_ten_char_string_t;

      sequence<string, 5> bounded_five_string_arr;

      sequence<string<10>> bounded_ten_char_unbounded_string_arr;

      sequence<string<10>, 5> bounded_ten_char_bounded_five_string_arr;
    };
    typedef int32 int32__5[5];
    typedef string string__5[5];
    module ActionCollection_Feedback_Constants {
      const string CONSTANT_STRING_THIRD = "CONSTANT_STRING_THIRD";
    };
    struct ActionCollection_Feedback {
      @verbatim (language="comment", text=
        " Response section has data fields that are sent to client after service process.")
      boolean bool_t;

      octet byte_t;

      uint8 char_t;

      float float_t;

      double double_t;

      int8 octet_int_t;

      uint8 octet_uint_t;

      int16 short_int_t;

      uint16 short_uint_t;

      int32 long_int_t;

      uint32 long_uint_t;

      int64 long_long_int_t;

      uint64 long_long_uint_t;

      @verbatim (language="comment", text=
        " array and bounded types" "\n"
        " [] unbounded, [N] static, [<=N] bounded")
      sequence<int32> unbounded_long_int_arr;

      int32__5 static_five_long_int_arr;

      sequence<int32, 5> bounded_five_long_int_arr;

      @verbatim (language="comment", text=
        " string data types" "\n"
        " <=N bounded character, [N] static string array, [<=N] bounded string array" "\n"
        " <=N[] bounded character unbounded string array" "\n"
        " <=N[<=M] bounded character bounded string array")
      string string_t;

      string__5 static_five_string_arr;

      string<10> bounded_ten_char_string_t;

      sequence<string, 5> bounded_five_string_arr;

      sequence<string<10>> bounded_ten_char_unbounded_string_arr;

      sequence<string<10>, 5> bounded_ten_char_bounded_five_string_arr;
    };
  };
};
